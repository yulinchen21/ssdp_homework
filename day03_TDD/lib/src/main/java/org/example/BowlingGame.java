/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example;

import java.util.ArrayList;
import java.util.List;

public class BowlingGame {
  private static final int MAX_FRAMES = 10;
  private static final int MAX_PINS = 10;
  private final List<Roll> rolls;

  public BowlingGame() {
    rolls = new ArrayList<>();
  }

  public void roll(int pins) {
    rolls.add(new Roll(pins));
  }

  public int score() {
    int score = 0;
    int rollIndex = 0;

    for (int frame = 0; frame < MAX_FRAMES; frame++) {
      int frameScore = calculateFrameScore(rollIndex);
      score += frameScore;
      rollIndex +=  getRollType(rollIndex) == RollType.STRIKE ? 1 : 2;
    }

    return score;
  }

  private int calculateFrameScore(int rollIndex) {
    RollType rollType = getRollType(rollIndex);

    switch (rollType) {
      case STRIKE:
        return MAX_PINS + sumOfBallsInFrame(rollIndex + 1);
      case SPARE:
        return MAX_PINS + rolls.get(rollIndex + 2).getPins();
      default:
        return sumOfBallsInFrame(rollIndex);
    }
  }

  private int strikeBonus(int rollIndex) {
    return rolls.get(rollIndex + 1).getPins() + rolls.get(rollIndex + 2).getPins();
  }

  private int spareBonus(int rollIndex) {
    return rolls.get(rollIndex + 2).getPins();
  }

  private int sumOfBallsInFrame(int rollIndex) {
    return rolls.get(rollIndex).getPins() + rolls.get(rollIndex + 1).getPins();
  }


  private RollType getRollType(int rollIndex) {
    int pins = rolls.get(rollIndex).getPins();

    if (pins == MAX_PINS) {
      return RollType.STRIKE;
    } else if (pins + rolls.get(rollIndex + 1).getPins() == MAX_PINS) {
      return RollType.SPARE;
    } else {
      return RollType.NORMAL;
    }
  }

  private enum RollType {
    STRIKE,
    SPARE,
    NORMAL
  }

  private static class Roll {
    private final int pins;

    public Roll(int pins) {
      this.pins = pins;
    }

    public int getPins() {
      return pins;
    }
  }
}
