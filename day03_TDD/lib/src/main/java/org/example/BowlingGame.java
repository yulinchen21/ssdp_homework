/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example;

import java.util.ArrayList;
import java.util.List;

public class BowlingGame {
  private static final int MAX_FRAMES = 10;
  private static final int MAX_PINS = 10;
  private final List<Roll> rolls;

  public BowlingGame() {
    rolls = new ArrayList<>();
  }

  public void roll(int pins) {
    rolls.add(new Roll(pins));
  }

  public int score() {
    int score = 0;
    int rollIndex = 0;

    for (int frame = 0; frame < MAX_FRAMES; frame++) {
      int frameScore = calculateFrameScore(rollIndex);
      score += frameScore;
      rollIndex += increaseRollIndex(rollIndex);
    }

    return score;
  }

  private int increaseRollIndex(int rollIndex) {
    return getRollType(rollIndex) == RollType.STRIKE ? 1 : 2;
  }

  private int calculateFrameScore(int rollIndex) {
    RollType rollType = getRollType(rollIndex);
    return switch (rollType) {
      case STRIKE -> MAX_PINS + sumOfBallsInFrame(rollIndex + 1);
      case SPARE -> MAX_PINS + getPins(rollIndex + 2);
      default -> sumOfBallsInFrame(rollIndex);
    };
  }

  private int sumOfBallsInFrame(int rollIndex) {
    return getPins(rollIndex) + getPins(rollIndex + 1);
  }

  private RollType getRollType(int rollIndex) {
    int pins = getPins(rollIndex);

    if (pins == MAX_PINS) {
      return RollType.STRIKE;
    } else if (pins + getPins(rollIndex + 1) == MAX_PINS) {
      return RollType.SPARE;
    } else {
      return RollType.NORMAL;
    }
  }

  private int getPins(final int rollIndex) {
    return rolls.get(rollIndex).getPins();
  }

  private enum RollType {
    STRIKE,
    SPARE,
    NORMAL
  }

  private static class Roll {
    private final int pins;

    public Roll(int pins) {
      this.pins = pins;
    }

    public int getPins() {
      return pins;
    }
  }
}
